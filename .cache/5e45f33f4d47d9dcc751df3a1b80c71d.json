{"dependencies":[],"generated":{"js":"// # Angular-Inview\n// - Author: [Nicola Peduzzi](https://github.com/thenikso)\n// - Repository: https://github.com/thenikso/angular-inview\n// - Install with: `npm install angular-inview`\n// - Version: **2.2.0**\n(function() {\n'use strict';\n\n// An [angular.js](https://angularjs.org) directive to evaluate an expression if\n// a DOM element is or not in the current visible browser viewport.\n// Use it in your AngularJS app by including the javascript and requireing it:\n//\n// `angular.module('myApp', ['angular-inview'])`\nvar angularInviewModule = angular.module('angular-inview', [])\n\n// ## in-view directive\n//\n// ### Usage\n// ```html\n// <any in-view=\"{expression}\" [in-view-options=\"{object}\"]></any>\n// ```\n.directive('inView', ['$parse', inViewDirective])\n\n// ## in-view-container directive\n.directive('inViewContainer', inViewContainerDirective);\n\n// ## Implementation\nfunction inViewDirective ($parse) {\n  return {\n    // Evaluate the expression passet to the attribute `in-view` when the DOM\n    // element is visible in the viewport.\n    restrict: 'A',\n    require: '?^^inViewContainer',\n    link: function inViewDirectiveLink (scope, element, attrs, container) {\n      // in-view-options attribute can be specified with an object expression\n      // containing:\n      //   - `offset`: An array of values to offset the element position.\n      //     Offsets are expressed as arrays of 4 numbers [top, right, bottom, left].\n      //     Like CSS, you can also specify only 2 numbers [top/bottom, left/right].\n      //     Instead of numbers, some array elements can be a string with a percentage.\n      //     Positive numbers are offsets outside the element rectangle and\n      //     negative numbers are offsets to the inside.\n      //   - `viewportOffset`: Like the element offset but appied to the viewport.\n      //   - `generateDirection`: Indicate if the `direction` information should\n      //     be included in `$inviewInfo` (default false).\n      //   - `generateParts`: Indicate if the `parts` information should\n      //     be included in `$inviewInfo` (default false).\n      //   - `throttle`: Specify a number of milliseconds by which to limit the\n      //     number of incoming events.\n      var options = {};\n      if (attrs.inViewOptions) {\n        options = scope.$eval(attrs.inViewOptions);\n      }\n      if (options.offset) {\n        options.offset = normalizeOffset(options.offset);\n      }\n      if (options.viewportOffset) {\n        options.viewportOffset = normalizeOffset(options.viewportOffset);\n      }\n\n      // Build reactive chain from an initial event\n      var viewportEventSignal = signalSingle({ type: 'initial' })\n\n      // Merged with the window events\n      .merge(signalFromEvent(window, 'checkInView click ready wheel mousewheel DomMouseScroll MozMousePixelScroll resize scroll touchmove mouseup keydown'))\n\n      // Merge with container's events signal\n      if (container) {\n        viewportEventSignal = viewportEventSignal.merge(container.eventsSignal);\n      }\n\n      // Throttle if option specified\n      if (options.throttle) {\n        viewportEventSignal = viewportEventSignal.throttle(options.throttle);\n      }\n\n      // Map to viewport intersection and in-view informations\n      var inviewInfoSignal = viewportEventSignal\n\n      // Inview information structure contains:\n      //   - `inView`: a boolean value indicating if the element is\n      //     visible in the viewport;\n      //   - `changed`: a boolean value indicating if the inview status\n      //     changed after the last event;\n      //   - `event`: the event that initiated the in-view check;\n      .map(function(event) {\n        var viewportRect;\n        if (container) {\n          viewportRect = container.getViewportRect();\n          // TODO merge with actual window!\n        } else {\n          viewportRect = getViewportRect();\n        }\n        viewportRect = offsetRect(viewportRect, options.viewportOffset);\n        var elementRect = offsetRect(element[0].getBoundingClientRect(), options.offset);\n        var isVisible = !!(element[0].offsetWidth || element[0].offsetHeight || element[0].getClientRects().length);\n        var info = {\n          inView: isVisible && intersectRect(elementRect, viewportRect),\n          event: event,\n          element: element,\n          elementRect: elementRect,\n          viewportRect: viewportRect\n        };\n        // Add inview parts\n        if (options.generateParts && info.inView) {\n          info.parts = {};\n          info.parts.top = elementRect.top >= viewportRect.top;\n          info.parts.left = elementRect.left >= viewportRect.left;\n          info.parts.bottom = elementRect.bottom <= viewportRect.bottom;\n          info.parts.right = elementRect.right <= viewportRect.right;\n        }\n        return info;\n      })\n\n      // Add the changed information to the inview structure.\n      .scan({}, function (lastInfo, newInfo) {\n        // Add inview direction info\n        if (options.generateDirection && newInfo.inView && lastInfo.elementRect) {\n          newInfo.direction = {\n            horizontal: newInfo.elementRect.left - lastInfo.elementRect.left,\n            vertical: newInfo.elementRect.top - lastInfo.elementRect.top\n          };\n        }\n        // Calculate changed flag\n        newInfo.changed =\n          newInfo.inView !== lastInfo.inView ||\n          !angular.equals(newInfo.parts, lastInfo.parts) ||\n          !angular.equals(newInfo.direction, lastInfo.direction);\n        return newInfo;\n      })\n\n      // Filters only informations that should be forwarded to the callback\n      .filter(function (info) {\n        // Don't forward if no relevant infomation changed\n        if (!info.changed) {\n          return false;\n        }\n        // Don't forward if not initially in-view\n        if (info.event.type === 'initial' && !info.inView) {\n          return false;\n        }\n        return true;\n      });\n\n      // Execute in-view callback\n      var inViewExpression = $parse(attrs.inView);\n      var dispose = inviewInfoSignal.subscribe(function (info) {\n        scope.$applyAsync(function () {\n          inViewExpression(scope, {\n            '$inview': info.inView,\n            '$inviewInfo': info\n          });\n        });\n      });\n\n      // Dispose of reactive chain\n      scope.$on('$destroy', dispose);\n    }\n  }\n}\n\nfunction inViewContainerDirective () {\n  return {\n    restrict: 'A',\n    controller: ['$element', function ($element) {\n      this.element = $element;\n      this.eventsSignal = signalFromEvent($element, 'scroll');\n      this.getViewportRect = function () {\n        return $element[0].getBoundingClientRect();\n      };\n    }]\n  }\n}\n\n// ## Utilities\n\nfunction getViewportRect () {\n  var result = {\n    top: 0,\n    left: 0,\n    width: window.innerWidth,\n    right: window.innerWidth,\n    height: window.innerHeight,\n    bottom: window.innerHeight\n  };\n  if (result.height) {\n    return result;\n  }\n  var mode = document.compatMode;\n  if (mode === 'CSS1Compat') {\n    result.width = result.right = document.documentElement.clientWidth;\n    result.height = result.bottom = document.documentElement.clientHeight;\n  } else {\n    result.width = result.right = document.body.clientWidth;\n    result.height = result.bottom = document.body.clientHeight;\n  }\n  return result;\n}\n\nfunction intersectRect (r1, r2) {\n  return !(r2.left > r1.right ||\n           r2.right < r1.left ||\n           r2.top > r1.bottom ||\n           r2.bottom < r1.top);\n}\n\nfunction normalizeOffset (offset) {\n  if (!angular.isArray(offset)) {\n    return [offset, offset, offset, offset];\n  }\n  if (offset.length == 2) {\n    return offset.concat(offset);\n  }\n  else if (offset.length == 3) {\n    return offset.concat([offset[1]]);\n  }\n  return offset;\n}\n\nfunction offsetRect (rect, offset) {\n  if (!offset) {\n    return rect;\n  }\n  var offsetObject = {\n    top: isPercent(offset[0]) ? (parseFloat(offset[0]) * rect.height) : offset[0],\n    right: isPercent(offset[1]) ? (parseFloat(offset[1]) * rect.width) : offset[1],\n    bottom: isPercent(offset[2]) ? (parseFloat(offset[2]) * rect.height) : offset[2],\n    left: isPercent(offset[3]) ? (parseFloat(offset[3]) * rect.width) : offset[3]\n  };\n  // Note: ClientRect object does not allow its properties to be written to therefore a new object has to be created.\n  return {\n    top: rect.top - offsetObject.top,\n    left: rect.left - offsetObject.left,\n    bottom: rect.bottom + offsetObject.bottom,\n    right: rect.right + offsetObject.right,\n    height: rect.height + offsetObject.top + offsetObject.bottom,\n    width: rect.width + offsetObject.left + offsetObject.right\n  };\n}\n\nfunction isPercent (n) {\n  return angular.isString(n) && n.indexOf('%') > 0;\n}\n\n// ## QuickSignal FRP\n// A quick and dirty implementation of Rx to have a streamlined code in the\n// directives.\n\n// ### QuickSignal\n//\n// - `didSubscribeFunc`: a function receiving a `subscriber` as described below\n//\n// Usage:\n//     var mySignal = new QuickSignal(function(subscriber) { ... })\nfunction QuickSignal (didSubscribeFunc) {\n  this.didSubscribeFunc = didSubscribeFunc;\n}\n\n// Subscribe to a signal and consume the steam of data.\n//\n// Returns a function that can be called to stop the signal stream of data and\n// perform cleanup.\n//\n// A `subscriber` is a function that will be called when a new value arrives.\n// a `subscriber.$dispose` property can be set to a function to be called uppon\n// disposal. When setting the `$dispose` function, the previously set function\n// should be chained.\nQuickSignal.prototype.subscribe = function (subscriber) {\n  this.didSubscribeFunc(subscriber);\n  var dispose = function () {\n    if (subscriber.$dispose) {\n      subscriber.$dispose();\n      subscriber.$dispose = null;\n    }\n  }\n  return dispose;\n}\n\nQuickSignal.prototype.map = function (f) {\n  var s = this;\n  return new QuickSignal(function (subscriber) {\n    subscriber.$dispose = s.subscribe(function (nextValue) {\n      subscriber(f(nextValue));\n    });\n  });\n};\n\nQuickSignal.prototype.filter = function (f) {\n  var s = this;\n  return new QuickSignal(function (subscriber) {\n    subscriber.$dispose = s.subscribe(function (nextValue) {\n      if (f(nextValue)) {\n        subscriber(nextValue);\n      }\n    });\n  });\n};\n\nQuickSignal.prototype.scan = function (initial, scanFunc) {\n  var s = this;\n  return new QuickSignal(function (subscriber) {\n    var last = initial;\n    subscriber.$dispose = s.subscribe(function (nextValue) {\n      last = scanFunc(last, nextValue);\n      subscriber(last);\n    });\n  });\n}\n\nQuickSignal.prototype.merge = function (signal) {\n  return signalMerge(this, signal);\n};\n\nQuickSignal.prototype.throttle = function (threshhold) {\n  var s = this, last, deferTimer;\n  return new QuickSignal(function (subscriber) {\n    var chainDisposable = s.subscribe(function () {\n      var now = +new Date,\n          args = arguments;\n      if (last && now < last + threshhold) {\n        clearTimeout(deferTimer);\n        deferTimer = setTimeout(function () {\n          last = now;\n          subscriber.apply(null, args);\n        }, threshhold);\n      } else {\n        last = now;\n        subscriber.apply(null, args);\n      }\n    });\n    subscriber.$dispose = function () {\n      clearTimeout(deferTimer);\n      if (chainDisposable) chainDisposable();\n    };\n  });\n};\n\nfunction signalMerge () {\n  var signals = arguments;\n  return new QuickSignal(function (subscriber) {\n    var disposables = [];\n    for (var i = signals.length - 1; i >= 0; i--) {\n      disposables.push(signals[i].subscribe(function () {\n        subscriber.apply(null, arguments);\n      }));\n    }\n    subscriber.$dispose = function () {\n      for (var i = disposables.length - 1; i >= 0; i--) {\n        if (disposables[i]) disposables[i]();\n      }\n    }\n  });\n}\n\n// Returns a signal from DOM events of a target.\nfunction signalFromEvent (target, event) {\n  return new QuickSignal(function (subscriber) {\n    var handler = function (e) {\n      subscriber(e);\n    };\n    var el = angular.element(target);\n    el.on(event, handler);\n    subscriber.$dispose = function () {\n      el.off(event, handler);\n    };\n  });\n}\n\nfunction signalSingle (value) {\n  return new QuickSignal(function (subscriber) {\n    setTimeout(function() { subscriber(value); });\n  });\n}\n\n// Module loaders exports\nif (typeof define === 'function' && define.amd) {\n  define(['angular'], angularInviewModule);\n} else if (typeof module !== 'undefined' && module && module.exports) {\n  module.exports = angularInviewModule;\n}\n\n})();\n","map":{"mappings":[{"source":"angular-inview.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"angular-inview.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"angular-inview.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"angular-inview.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"angular-inview.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"angular-inview.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"angular-inview.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"angular-inview.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"angular-inview.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"angular-inview.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"angular-inview.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"angular-inview.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"angular-inview.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"angular-inview.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"angular-inview.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"angular-inview.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"angular-inview.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"angular-inview.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"angular-inview.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"angular-inview.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"angular-inview.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"angular-inview.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"angular-inview.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"angular-inview.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"angular-inview.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"angular-inview.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"angular-inview.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"angular-inview.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"angular-inview.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"angular-inview.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"angular-inview.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"angular-inview.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"angular-inview.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"angular-inview.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"angular-inview.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"angular-inview.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"angular-inview.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"angular-inview.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"angular-inview.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"angular-inview.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"angular-inview.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"angular-inview.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"angular-inview.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"angular-inview.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"angular-inview.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"angular-inview.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"angular-inview.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"angular-inview.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"angular-inview.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"angular-inview.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"angular-inview.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"angular-inview.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"angular-inview.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"angular-inview.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"angular-inview.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"angular-inview.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"angular-inview.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"angular-inview.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"angular-inview.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"angular-inview.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"angular-inview.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"angular-inview.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"angular-inview.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"angular-inview.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"angular-inview.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"angular-inview.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"angular-inview.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"angular-inview.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"angular-inview.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"angular-inview.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"angular-inview.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"angular-inview.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"angular-inview.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"angular-inview.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"angular-inview.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"angular-inview.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"angular-inview.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"angular-inview.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"angular-inview.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"angular-inview.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"angular-inview.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"angular-inview.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"angular-inview.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"angular-inview.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"angular-inview.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"angular-inview.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"angular-inview.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"angular-inview.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"angular-inview.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"angular-inview.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"angular-inview.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"angular-inview.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"angular-inview.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"angular-inview.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"angular-inview.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"angular-inview.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"angular-inview.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"angular-inview.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"angular-inview.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"angular-inview.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"angular-inview.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"angular-inview.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"angular-inview.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"angular-inview.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"angular-inview.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"angular-inview.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"angular-inview.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"angular-inview.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"angular-inview.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"angular-inview.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"angular-inview.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"angular-inview.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"angular-inview.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"angular-inview.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"angular-inview.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"angular-inview.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"angular-inview.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"angular-inview.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"angular-inview.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"angular-inview.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"angular-inview.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"angular-inview.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"angular-inview.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"angular-inview.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"angular-inview.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"angular-inview.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"angular-inview.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"angular-inview.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"angular-inview.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"angular-inview.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"angular-inview.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"angular-inview.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"angular-inview.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"angular-inview.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"angular-inview.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"angular-inview.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"angular-inview.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"angular-inview.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"angular-inview.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"angular-inview.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"angular-inview.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"angular-inview.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"angular-inview.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"angular-inview.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"angular-inview.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"angular-inview.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"angular-inview.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"angular-inview.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"angular-inview.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"angular-inview.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"angular-inview.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"angular-inview.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"angular-inview.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"angular-inview.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"angular-inview.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"angular-inview.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"angular-inview.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"angular-inview.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"angular-inview.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"angular-inview.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"angular-inview.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"angular-inview.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"angular-inview.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"angular-inview.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"angular-inview.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"angular-inview.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"angular-inview.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"angular-inview.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"angular-inview.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"angular-inview.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"angular-inview.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"angular-inview.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"angular-inview.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"angular-inview.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"angular-inview.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"angular-inview.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"angular-inview.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"angular-inview.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"angular-inview.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"angular-inview.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"angular-inview.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"angular-inview.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"angular-inview.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"angular-inview.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"angular-inview.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"angular-inview.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"angular-inview.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"angular-inview.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"angular-inview.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"angular-inview.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"angular-inview.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"angular-inview.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"angular-inview.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"angular-inview.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"angular-inview.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"angular-inview.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"angular-inview.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"angular-inview.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"angular-inview.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"angular-inview.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"angular-inview.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"angular-inview.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"angular-inview.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"angular-inview.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"angular-inview.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"angular-inview.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"angular-inview.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"angular-inview.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"angular-inview.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"angular-inview.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"angular-inview.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"angular-inview.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"angular-inview.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"angular-inview.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"angular-inview.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"angular-inview.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"angular-inview.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"angular-inview.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"angular-inview.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"angular-inview.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"angular-inview.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"angular-inview.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"angular-inview.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"angular-inview.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"angular-inview.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"angular-inview.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"angular-inview.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"angular-inview.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"angular-inview.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"angular-inview.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"angular-inview.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"angular-inview.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"angular-inview.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"angular-inview.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"angular-inview.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"angular-inview.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"angular-inview.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"angular-inview.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"angular-inview.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"angular-inview.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"angular-inview.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"angular-inview.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"angular-inview.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"angular-inview.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"angular-inview.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"angular-inview.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"angular-inview.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"angular-inview.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"angular-inview.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"angular-inview.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"angular-inview.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"angular-inview.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"angular-inview.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"angular-inview.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"angular-inview.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"angular-inview.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"angular-inview.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"angular-inview.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"angular-inview.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"angular-inview.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"angular-inview.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"angular-inview.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"angular-inview.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"angular-inview.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"angular-inview.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"angular-inview.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"angular-inview.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"angular-inview.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"angular-inview.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"angular-inview.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"angular-inview.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"angular-inview.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"angular-inview.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"angular-inview.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"angular-inview.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"angular-inview.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"angular-inview.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"angular-inview.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"angular-inview.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"angular-inview.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"angular-inview.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"angular-inview.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"angular-inview.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"angular-inview.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"angular-inview.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"angular-inview.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"angular-inview.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"angular-inview.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"angular-inview.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"angular-inview.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"angular-inview.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"angular-inview.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"angular-inview.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"angular-inview.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"angular-inview.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"angular-inview.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"angular-inview.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"angular-inview.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"angular-inview.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"angular-inview.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"angular-inview.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"angular-inview.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"angular-inview.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"angular-inview.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"angular-inview.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"angular-inview.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"angular-inview.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"angular-inview.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"angular-inview.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"angular-inview.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"angular-inview.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"angular-inview.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"angular-inview.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"angular-inview.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"angular-inview.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"angular-inview.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"angular-inview.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"angular-inview.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"angular-inview.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"angular-inview.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"angular-inview.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"angular-inview.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"angular-inview.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"angular-inview.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"angular-inview.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"angular-inview.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"angular-inview.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"angular-inview.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"angular-inview.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"angular-inview.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"angular-inview.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"angular-inview.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"angular-inview.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"angular-inview.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"angular-inview.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"angular-inview.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"angular-inview.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"angular-inview.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"angular-inview.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"angular-inview.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"angular-inview.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"angular-inview.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"angular-inview.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"angular-inview.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"angular-inview.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"angular-inview.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"angular-inview.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"angular-inview.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"angular-inview.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"angular-inview.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"angular-inview.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"angular-inview.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"angular-inview.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"angular-inview.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"angular-inview.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"angular-inview.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"angular-inview.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"angular-inview.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"angular-inview.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"angular-inview.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"angular-inview.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"angular-inview.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"angular-inview.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"angular-inview.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"angular-inview.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"angular-inview.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"angular-inview.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"angular-inview.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"angular-inview.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"angular-inview.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"angular-inview.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"angular-inview.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"angular-inview.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"angular-inview.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"angular-inview.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"angular-inview.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"angular-inview.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"angular-inview.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"angular-inview.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"angular-inview.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"angular-inview.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"angular-inview.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"angular-inview.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}}],"sources":{"angular-inview.js":"// # Angular-Inview\n// - Author: [Nicola Peduzzi](https://github.com/thenikso)\n// - Repository: https://github.com/thenikso/angular-inview\n// - Install with: `npm install angular-inview`\n// - Version: **2.2.0**\n(function() {\n'use strict';\n\n// An [angular.js](https://angularjs.org) directive to evaluate an expression if\n// a DOM element is or not in the current visible browser viewport.\n// Use it in your AngularJS app by including the javascript and requireing it:\n//\n// `angular.module('myApp', ['angular-inview'])`\nvar angularInviewModule = angular.module('angular-inview', [])\n\n// ## in-view directive\n//\n// ### Usage\n// ```html\n// <any in-view=\"{expression}\" [in-view-options=\"{object}\"]></any>\n// ```\n.directive('inView', ['$parse', inViewDirective])\n\n// ## in-view-container directive\n.directive('inViewContainer', inViewContainerDirective);\n\n// ## Implementation\nfunction inViewDirective ($parse) {\n  return {\n    // Evaluate the expression passet to the attribute `in-view` when the DOM\n    // element is visible in the viewport.\n    restrict: 'A',\n    require: '?^^inViewContainer',\n    link: function inViewDirectiveLink (scope, element, attrs, container) {\n      // in-view-options attribute can be specified with an object expression\n      // containing:\n      //   - `offset`: An array of values to offset the element position.\n      //     Offsets are expressed as arrays of 4 numbers [top, right, bottom, left].\n      //     Like CSS, you can also specify only 2 numbers [top/bottom, left/right].\n      //     Instead of numbers, some array elements can be a string with a percentage.\n      //     Positive numbers are offsets outside the element rectangle and\n      //     negative numbers are offsets to the inside.\n      //   - `viewportOffset`: Like the element offset but appied to the viewport.\n      //   - `generateDirection`: Indicate if the `direction` information should\n      //     be included in `$inviewInfo` (default false).\n      //   - `generateParts`: Indicate if the `parts` information should\n      //     be included in `$inviewInfo` (default false).\n      //   - `throttle`: Specify a number of milliseconds by which to limit the\n      //     number of incoming events.\n      var options = {};\n      if (attrs.inViewOptions) {\n        options = scope.$eval(attrs.inViewOptions);\n      }\n      if (options.offset) {\n        options.offset = normalizeOffset(options.offset);\n      }\n      if (options.viewportOffset) {\n        options.viewportOffset = normalizeOffset(options.viewportOffset);\n      }\n\n      // Build reactive chain from an initial event\n      var viewportEventSignal = signalSingle({ type: 'initial' })\n\n      // Merged with the window events\n      .merge(signalFromEvent(window, 'checkInView click ready wheel mousewheel DomMouseScroll MozMousePixelScroll resize scroll touchmove mouseup keydown'))\n\n      // Merge with container's events signal\n      if (container) {\n        viewportEventSignal = viewportEventSignal.merge(container.eventsSignal);\n      }\n\n      // Throttle if option specified\n      if (options.throttle) {\n        viewportEventSignal = viewportEventSignal.throttle(options.throttle);\n      }\n\n      // Map to viewport intersection and in-view informations\n      var inviewInfoSignal = viewportEventSignal\n\n      // Inview information structure contains:\n      //   - `inView`: a boolean value indicating if the element is\n      //     visible in the viewport;\n      //   - `changed`: a boolean value indicating if the inview status\n      //     changed after the last event;\n      //   - `event`: the event that initiated the in-view check;\n      .map(function(event) {\n        var viewportRect;\n        if (container) {\n          viewportRect = container.getViewportRect();\n          // TODO merge with actual window!\n        } else {\n          viewportRect = getViewportRect();\n        }\n        viewportRect = offsetRect(viewportRect, options.viewportOffset);\n        var elementRect = offsetRect(element[0].getBoundingClientRect(), options.offset);\n        var isVisible = !!(element[0].offsetWidth || element[0].offsetHeight || element[0].getClientRects().length);\n        var info = {\n          inView: isVisible && intersectRect(elementRect, viewportRect),\n          event: event,\n          element: element,\n          elementRect: elementRect,\n          viewportRect: viewportRect\n        };\n        // Add inview parts\n        if (options.generateParts && info.inView) {\n          info.parts = {};\n          info.parts.top = elementRect.top >= viewportRect.top;\n          info.parts.left = elementRect.left >= viewportRect.left;\n          info.parts.bottom = elementRect.bottom <= viewportRect.bottom;\n          info.parts.right = elementRect.right <= viewportRect.right;\n        }\n        return info;\n      })\n\n      // Add the changed information to the inview structure.\n      .scan({}, function (lastInfo, newInfo) {\n        // Add inview direction info\n        if (options.generateDirection && newInfo.inView && lastInfo.elementRect) {\n          newInfo.direction = {\n            horizontal: newInfo.elementRect.left - lastInfo.elementRect.left,\n            vertical: newInfo.elementRect.top - lastInfo.elementRect.top\n          };\n        }\n        // Calculate changed flag\n        newInfo.changed =\n          newInfo.inView !== lastInfo.inView ||\n          !angular.equals(newInfo.parts, lastInfo.parts) ||\n          !angular.equals(newInfo.direction, lastInfo.direction);\n        return newInfo;\n      })\n\n      // Filters only informations that should be forwarded to the callback\n      .filter(function (info) {\n        // Don't forward if no relevant infomation changed\n        if (!info.changed) {\n          return false;\n        }\n        // Don't forward if not initially in-view\n        if (info.event.type === 'initial' && !info.inView) {\n          return false;\n        }\n        return true;\n      });\n\n      // Execute in-view callback\n      var inViewExpression = $parse(attrs.inView);\n      var dispose = inviewInfoSignal.subscribe(function (info) {\n        scope.$applyAsync(function () {\n          inViewExpression(scope, {\n            '$inview': info.inView,\n            '$inviewInfo': info\n          });\n        });\n      });\n\n      // Dispose of reactive chain\n      scope.$on('$destroy', dispose);\n    }\n  }\n}\n\nfunction inViewContainerDirective () {\n  return {\n    restrict: 'A',\n    controller: ['$element', function ($element) {\n      this.element = $element;\n      this.eventsSignal = signalFromEvent($element, 'scroll');\n      this.getViewportRect = function () {\n        return $element[0].getBoundingClientRect();\n      };\n    }]\n  }\n}\n\n// ## Utilities\n\nfunction getViewportRect () {\n  var result = {\n    top: 0,\n    left: 0,\n    width: window.innerWidth,\n    right: window.innerWidth,\n    height: window.innerHeight,\n    bottom: window.innerHeight\n  };\n  if (result.height) {\n    return result;\n  }\n  var mode = document.compatMode;\n  if (mode === 'CSS1Compat') {\n    result.width = result.right = document.documentElement.clientWidth;\n    result.height = result.bottom = document.documentElement.clientHeight;\n  } else {\n    result.width = result.right = document.body.clientWidth;\n    result.height = result.bottom = document.body.clientHeight;\n  }\n  return result;\n}\n\nfunction intersectRect (r1, r2) {\n  return !(r2.left > r1.right ||\n           r2.right < r1.left ||\n           r2.top > r1.bottom ||\n           r2.bottom < r1.top);\n}\n\nfunction normalizeOffset (offset) {\n  if (!angular.isArray(offset)) {\n    return [offset, offset, offset, offset];\n  }\n  if (offset.length == 2) {\n    return offset.concat(offset);\n  }\n  else if (offset.length == 3) {\n    return offset.concat([offset[1]]);\n  }\n  return offset;\n}\n\nfunction offsetRect (rect, offset) {\n  if (!offset) {\n    return rect;\n  }\n  var offsetObject = {\n    top: isPercent(offset[0]) ? (parseFloat(offset[0]) * rect.height) : offset[0],\n    right: isPercent(offset[1]) ? (parseFloat(offset[1]) * rect.width) : offset[1],\n    bottom: isPercent(offset[2]) ? (parseFloat(offset[2]) * rect.height) : offset[2],\n    left: isPercent(offset[3]) ? (parseFloat(offset[3]) * rect.width) : offset[3]\n  };\n  // Note: ClientRect object does not allow its properties to be written to therefore a new object has to be created.\n  return {\n    top: rect.top - offsetObject.top,\n    left: rect.left - offsetObject.left,\n    bottom: rect.bottom + offsetObject.bottom,\n    right: rect.right + offsetObject.right,\n    height: rect.height + offsetObject.top + offsetObject.bottom,\n    width: rect.width + offsetObject.left + offsetObject.right\n  };\n}\n\nfunction isPercent (n) {\n  return angular.isString(n) && n.indexOf('%') > 0;\n}\n\n// ## QuickSignal FRP\n// A quick and dirty implementation of Rx to have a streamlined code in the\n// directives.\n\n// ### QuickSignal\n//\n// - `didSubscribeFunc`: a function receiving a `subscriber` as described below\n//\n// Usage:\n//     var mySignal = new QuickSignal(function(subscriber) { ... })\nfunction QuickSignal (didSubscribeFunc) {\n  this.didSubscribeFunc = didSubscribeFunc;\n}\n\n// Subscribe to a signal and consume the steam of data.\n//\n// Returns a function that can be called to stop the signal stream of data and\n// perform cleanup.\n//\n// A `subscriber` is a function that will be called when a new value arrives.\n// a `subscriber.$dispose` property can be set to a function to be called uppon\n// disposal. When setting the `$dispose` function, the previously set function\n// should be chained.\nQuickSignal.prototype.subscribe = function (subscriber) {\n  this.didSubscribeFunc(subscriber);\n  var dispose = function () {\n    if (subscriber.$dispose) {\n      subscriber.$dispose();\n      subscriber.$dispose = null;\n    }\n  }\n  return dispose;\n}\n\nQuickSignal.prototype.map = function (f) {\n  var s = this;\n  return new QuickSignal(function (subscriber) {\n    subscriber.$dispose = s.subscribe(function (nextValue) {\n      subscriber(f(nextValue));\n    });\n  });\n};\n\nQuickSignal.prototype.filter = function (f) {\n  var s = this;\n  return new QuickSignal(function (subscriber) {\n    subscriber.$dispose = s.subscribe(function (nextValue) {\n      if (f(nextValue)) {\n        subscriber(nextValue);\n      }\n    });\n  });\n};\n\nQuickSignal.prototype.scan = function (initial, scanFunc) {\n  var s = this;\n  return new QuickSignal(function (subscriber) {\n    var last = initial;\n    subscriber.$dispose = s.subscribe(function (nextValue) {\n      last = scanFunc(last, nextValue);\n      subscriber(last);\n    });\n  });\n}\n\nQuickSignal.prototype.merge = function (signal) {\n  return signalMerge(this, signal);\n};\n\nQuickSignal.prototype.throttle = function (threshhold) {\n  var s = this, last, deferTimer;\n  return new QuickSignal(function (subscriber) {\n    var chainDisposable = s.subscribe(function () {\n      var now = +new Date,\n          args = arguments;\n      if (last && now < last + threshhold) {\n        clearTimeout(deferTimer);\n        deferTimer = setTimeout(function () {\n          last = now;\n          subscriber.apply(null, args);\n        }, threshhold);\n      } else {\n        last = now;\n        subscriber.apply(null, args);\n      }\n    });\n    subscriber.$dispose = function () {\n      clearTimeout(deferTimer);\n      if (chainDisposable) chainDisposable();\n    };\n  });\n};\n\nfunction signalMerge () {\n  var signals = arguments;\n  return new QuickSignal(function (subscriber) {\n    var disposables = [];\n    for (var i = signals.length - 1; i >= 0; i--) {\n      disposables.push(signals[i].subscribe(function () {\n        subscriber.apply(null, arguments);\n      }));\n    }\n    subscriber.$dispose = function () {\n      for (var i = disposables.length - 1; i >= 0; i--) {\n        if (disposables[i]) disposables[i]();\n      }\n    }\n  });\n}\n\n// Returns a signal from DOM events of a target.\nfunction signalFromEvent (target, event) {\n  return new QuickSignal(function (subscriber) {\n    var handler = function (e) {\n      subscriber(e);\n    };\n    var el = angular.element(target);\n    el.on(event, handler);\n    subscriber.$dispose = function () {\n      el.off(event, handler);\n    };\n  });\n}\n\nfunction signalSingle (value) {\n  return new QuickSignal(function (subscriber) {\n    setTimeout(function() { subscriber(value); });\n  });\n}\n\n// Module loaders exports\nif (typeof define === 'function' && define.amd) {\n  define(['angular'], angularInviewModule);\n} else if (typeof module !== 'undefined' && module && module.exports) {\n  module.exports = angularInviewModule;\n}\n\n})();\n"},"lineCount":383}},"hash":"104a2585107b5eb2aadf36d79d188067","cacheData":{"env":{}}}